; 1. Basic Arithmetic Operations

(plus 3 4)       ; Expected result: 7
(minus 10 5)     ; Expected result: 5
(times 6 7)      ; Expected result: 42
(divide 20 4)    ; Expected result: 5


; 2. Arithmetic with Real Numbers

(plus 1.5 2.5)   ; Expected result: 4.0
(minus 5.5 2.2)  ; Expected result: 3.3
(times 3.0 4.0)  ; Expected result: 12.0
(divide 9.0 3.0) ; Expected result: 3.0


; 3. Creating and Using Lists

(cons 1 (cons 2 (cons 3 null))) ; Expected result: (1 2 3)
(head (cons 1 (cons 2 null)))   ; Expected result: 1
(tail (cons 1 (cons 2 null)))   ; Expected result: (2)

; 4. List Manipulations

(head (cons 1 (cons 2 (cons 3 (cons 4 null))))) ; Expected result: 1
(tail (tail (cons 1 (cons 2 (cons 3 (cons 4 null)))))) ; Expected result: (3 4)

; 5. Predicate Functions

(isint 42)       ; Expected result: true
(isreal 3.14)    ; Expected result: true
(isbool true)    ; Expected result: true
(isnull 1)    	 ; Expected result: false
(islist (cons 1 (cons 2 null))) ; Expected result: true
(isatom 

; 6. Comparison Functions

(equal 5 5)       ; Expected result: true
(nonequal 5 4)    ; Expected result: true
(less 3 5)        ; Expected result: true
(lesseq 5 5)      ; Expected result: true
(greater 6 5)     ; Expected result: true
(greatereq 5 5)   ; Expected result: true

; 7. Logical Operations

(and true false)   ; Expected result: false
(or true false)    ; Expected result: true
(xor true false)   ; Expected result: true
(not true)         ; Expected result: false

; 8. Function Definitions and Calls

(func addTwo (x) (plus x 2)) ; Define a function that adds 2 to its argument
(addTwo 3)                ; Expected result: 5

(func square (x) (times x x))   ; Function that squares its argument
(square 4)                      ; Expected result: 16

(func sumOfSquares (a b) (plus (square a) (square b))) ; Sum of squares of two numbers
(sumOfSquares 3 4)              ; Expected result: 25

(func powerOfThree (x) (times (square x) x)) ; Function that calculates x^3
(powerOfThree 2)               ; Expected result: 8

; 9. Lambda Functions

(setq double (lambda (x) (times x 2))) ; Define an unnamed function to double its argument
(double 4)                      ; Expected result: 8

(setq increment (lambda (x) (plus x 1))) ; Lambda function to increment by 1
(increment 7)               ; Expected result: 8

(setq applyTwice (lambda (f x) (f (f x)))) ; Lambda that applies function f twice
(applyTwice increment 5)    ; Expected result: 7

(setq subtractTwo (lambda (x) (minus x 2))) ; Lambda that subtracts 2
(applyTwice subtractTwo 10)  ; Expected result: 6


; 10. Conditionals

(cond (less 3 5) (plus 2 2) (minus 5 3)) ; Expected result: 4
(cond (greater 5 3) (plus 10 5) (minus 5 3)) ; Expected result: 15

(cond (greater 5 2) (plus 1 1) (minus 4 2)) ; Expected result: 2 (first condition is true)
(cond (less 5 3) (plus 1 1) (greater 2 1) (minus 10 5)) ; Expected result: 5 (second condition is true)

; Test condition with "and" and "or" inside
(cond (and (greater 5 3) (less 2 4)) (plus 10 5) (minus 5 2)) ; Expected result: 15
(cond (or (less 3 2) (greater 5 1)) (plus 2 3) (minus 5 2))  ; Expected result: 5

; 11. While Loops

(setq counter 0)
(while (less counter 5) 
  (setq counter (plus counter 1))) ; Final value of counter should be 5

(setq count 0)
(while (less count 3) 
  (setq count (plus count 1)))  ; Expected final value of count: 3

(setq sum 0)
(setq n 1)
(while (less n 6)
  (setq sum (plus sum n))
  (setq n (plus n 1)))          ; Expected final value of sum: 15 (1 + 2 + 3 + 4 + 5)

; 12. Breaking Out of Loops

(setq counter 0)
(while (less counter 10)
  (cond (equal counter 5) (break) (setq counter (plus counter 1)))
  )) ; Final value of counter should be 5

; 13. Nested Function Calls

(func triple (x) (times x 3))
(func addAndTriple (a b) (triple (plus a b)))
(addAndTriple 2 3) ; Expected result: 15

; Three functions: one takes a function as argument, one is nested, one returns a function

(func double (x) (times x 2))   ; Function to double the argument
(func applyFunction (f x) (f x)) ; Function that applies function f to x
(applyFunction double 4)        ; Expected result: 8

; Function that returns another function
(func returnMultiplier (factor) 
  (lambda (x) (times x factor))) ; Return a function that multiplies by 'factor'
(setq triple (returnMultiplier 3)) ; Create a triple function by passing 3
(triple 4)                        ; Expected result: 12

; Nested function that returns the result of applying a returned function
(func applyReturnedFunction (f x factor) 
  (applyFunction (returnMultiplier factor) x)) 
(applyReturnedFunction square 2 3) ; Expected result: 12 (square(2) = 4, times 3 = 12)

; 14. Function with Local Context

(prog (x) 
  (setq x 10)
  (setq y (plus x 5))
  y) ; Expected result: 15

; --- Basic Test for prog ---

(prog (x y)               ; Declares local variables x and y
  (setq x 5)              ; Set x = 5
  (setq y (plus x 3))     ; Set y = x + 3
  y)                      ; Expected result: 8

(prog (x y z)             ; Declares local variables x, y, z
  (setq x 2)              ; Set x = 2
  (setq y (times x 4))    ; Set y = x * 4 = 8
  (setq z (minus y 3))    ; Set z = y - 3 = 5
  z)                      ; Expected result: 5


; --- prog with Conditionals and Arithmetic (using cond) ---

(prog (a b c)              
  (setq a 10)             ; Set a = 10
  (setq b 15)             ; Set b = 15
  (cond
    ((greater a b) (setq c (minus a b)))  ; If a > b, c = a - b
    (true (setq c (minus b a))))           ; Else, c = b - a
  c)                      ; Expected result: 5 (since b > a)


; --- prog with Nested Operations (using cond) ---

(prog (x y result)        
  (setq x 3)              ; Set x = 3
  (setq y (plus x 2))     ; Set y = x + 2 = 5
  (cond
    ((less x y) (setq result (times y 2))) ; If x < y, result = y * 2 = 10
    (true (setq result x)))               ; Else result = x
  result)                 ; Expected result: 10 (since x < y)


; --- prog with Loops ---

(prog (counter sum)       
  (setq counter 1)        ; Initialize counter = 1
  (setq sum 0)            ; Initialize sum = 0
  (while (less counter 6) ; While counter < 6
    (setq sum (plus sum counter)) ; Add counter to sum
    (setq counter (plus counter 1))) ; Increment counter
  sum)                    ; Expected result: 15 (sum of 1 + 2 + 3 + 4 + 5)


; --- prog with Function Calls ---

(prog (a b c result)      
  (setq a 5)              ; Set a = 5
  (setq b 10)             ; Set b = 10
  (setq c (plus a b))     ; c = a + b = 15
  (func multiplyByTwo (x) (times x 2)) ; Define a function within prog
  (setq result (multiplyByTwo c)) ; result = multiplyByTwo(15) = 30
  result)                 ; Expected result: 30


; --- prog with eval and Nested progs ---

(prog (code result)       
  (setq code (quote (plus 7 8))) ; Define some code to evaluate
  (setq result (eval code))      ; Evaluate the code (7 + 8)
  (prog (x y)                    ; Nested prog block
    (setq x 5)                   ; Set x = 5
    (setq y 10)                  ; Set y = 10
    (setq result (plus result (times x y)))) ; result = result + (5 * 10)
  result)                        ; Expected result: 65 (15 + 50)


; --- prog with Multiple Return Points (using cond) ---

(prog (a b result)        
  (setq a 4)              ; Set a = 4
  (setq b 6)              ; Set b = 6
  (cond
    ((equal a b) (return a))        ; If a == b, return a early
    ((less a b) (return (plus a b)))) ; If a < b, return a + b early
  (setq result (minus b a)) ; If no conditions match, set result = b - a
  result)                 ; Expected result: 10 (since a < b)


; --- prog with Local Variables and Temporary Results ---

(prog (x y temp final)    
  (setq x 8)              ; Set x = 8
  (setq y 12)             ; Set y = 12
  (setq temp (plus x y))  ; temp = x + y = 20
  (setq final (times temp 2)) ; final = temp * 2 = 40
  final)                  ; Expected result: 40


; --- prog with Recursion (using cond) ---

(func factorial (n)
  (prog (result)          ; Using prog to calculate factorial
    (cond
      ((equal n 0) (return 1))   ; If n == 0, return 1 (base case)
      (true (return (times n (factorial (minus n 1)))))))) ; Recursive call

(factorial 5)             ; Expected result: 120


; --- prog that Simulates a for-loop (manually) ---

(prog (i total)
  (setq i 1)              ; Initialize i to 1
  (setq total 0)          ; Initialize total to 0
  (while (less i 6)       ; While i < 6 (manual for-loop)
    (setq total (plus total i)) ; Add i to total
    (setq i (plus i 1)))  ; Increment i
  total)                  ; Expected result: 15 (1 + 2 + 3 + 4 + 5)


; 15. Evaluating Code with 'eval'

(setq code (quote (plus 7 8)))
(eval code) ; Expected result: 15

(setq conditionCode (quote (cond (greater 4 3) (plus 1 1) (minus 5 2)))) ; Conditional code
(eval conditionCode)              ; Expected result: 2

(setq nestedCode (quote (plus (times 3 4) (divide 12 3)))) ; Nested arithmetic
(eval nestedCode)                 ; Expected result: 16

(setq factorialCode (quote (factorial 4))) ; Factorial evaluation via eval
(eval factorialCode)              ; Expected result: 24 (factorial(4) = 24)

; 16? Recursion 

(func factorial (n)
  (cond
    (equal n 0) 1
    (true (times n (factorial (minus n 1))))))
(factorial 5) ; Expected result: 120
(factorial 6) ; Expected result: 720

; Fibonacci function using recursion
(func fibonacci (n) 
  (cond 
    (less n 2) n
    (true (plus (fibonacci (minus n 1)) (fibonacci (minus n 2))))))

(fibonacci 5)                     ; Expected result: 5
(fibonacci 8)                     ; Expected result: 21

; Sum of first n natural numbers using recursion
(func sumToN (n) 
  (cond 
    (equal n 0) 0
    (true (plus n (sumToN (minus n 1))))))

(sumToN 5)                        ; Expected result: 15 (1+2+3+4+5 = 15)
(sumToN 10)                       ; Expected result: 55

; 17? Objects

(setq createPerson (lambda (name age) (cons name age)))
(setq person (createPerson "Alice" 30))
(head person)  ; Expected result: "Alice"

(func getName (person)
  (head person))
(func getAge (person)
  (tail person))
(setq person (createPerson "Bob" 25))
(getName person) ; Expected result: "Bob"
(getAge person)  ; Expected result: 25


