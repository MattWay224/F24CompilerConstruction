ProgNode(statements=[ProgNode(statements=[AssignmentNode(variable=x, value=LiteralNode(10)), AssignmentNode(variable=y, value=OperationNode(operator=plus, operands=[AtomNode(x), LiteralNode(5)])), AtomNode(y)]), ProgNode(statements=[AssignmentNode(variable=x, value=LiteralNode(5)), AssignmentNode(variable=y, value=OperationNode(operator=plus, operands=[AtomNode(x), LiteralNode(3)])), AtomNode(y)]), ProgNode(statements=[AssignmentNode(variable=x, value=LiteralNode(2)), AssignmentNode(variable=y, value=OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(4)])), AssignmentNode(variable=z, value=OperationNode(operator=minus, operands=[AtomNode(y), LiteralNode(3)])), AtomNode(z)]), ProgNode(statements=[AssignmentNode(variable=a, value=LiteralNode(10)), AssignmentNode(variable=b, value=LiteralNode(15)), ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=greater, leftElement=AtomNode(a), rightElement=AtomNode(b)), action=AssignmentNode(variable=c, value=OperationNode(operator=minus, operands=[AtomNode(a), AtomNode(b)])))], defaultAction=[AssignmentNode(variable=c, value=OperationNode(operator=minus, operands=[AtomNode(b), AtomNode(a)]))])]), ProgNode(statements=[AssignmentNode(variable=x, value=LiteralNode(3)), AssignmentNode(variable=y, value=OperationNode(operator=plus, operands=[AtomNode(x), LiteralNode(2)])), ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=less, leftElement=AtomNode(x), rightElement=AtomNode(y)), action=AssignmentNode(variable=result, value=OperationNode(operator=times, operands=[AtomNode(y), LiteralNode(2)])))], defaultAction=[AssignmentNode(variable=result, value=AtomNode(x))]), AtomNode(result)]), ProgNode(statements=[AssignmentNode(variable=counter, value=LiteralNode(1)), AssignmentNode(variable=sum, value=LiteralNode(0)), WhileNode(condition=ComparisonNode(comparison=less, leftElement=AtomNode(counter), rightElement=LiteralNode(6)), body=AssignmentNode(variable=sum, value=OperationNode(operator=plus, operands=[AtomNode(sum), AtomNode(counter)])),
AssignmentNode(variable=counter, value=OperationNode(operator=plus, operands=[AtomNode(counter), LiteralNode(1)]))), AtomNode(sum)]), ProgNode(statements=[AssignmentNode(variable=a, value=LiteralNode(5)), AssignmentNode(variable=b, value=LiteralNode(10)), AssignmentNode(variable=c, value=OperationNode(operator=plus, operands=[AtomNode(a), AtomNode(b)])), FunctionNode(functionName=multiplyByTwo, parameters=[x], body=OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(2)])), AssignmentNode(variable=result, value=FunctionCallNode(functionName=multiplyByTwo, parameters=[AtomNode(multiplyByTwo), AtomNode(c)])), AtomNode(result)]), ProgNode(statements=[AssignmentNode(variable=code, value=QuoteNode(QuotedExpr:OperationNode(operator=plus, operands=[LiteralNode(7), LiteralNode(8)]))), AssignmentNode(variable=result, value=EvalNode(node=AtomNode(code))), ProgNode(statements=[AssignmentNode(variable=x, value=LiteralNode(5)), AssignmentNode(variable=y, value=LiteralNode(10)), AssignmentNode(variable=result, value=OperationNode(operator=plus, operands=[AtomNode(result), OperationNode(operator=times, operands=[AtomNode(x), AtomNode(y)])]))]), AtomNode(result)]), ProgNode(statements=[AssignmentNode(variable=a, value=LiteralNode(4)), AssignmentNode(variable=b, value=LiteralNode(6)), ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(a), rightElement=AtomNode(b)), action=ReturnNode(returnValue=AtomNode(a)))], defaultAction=[ReturnNode(returnValue=OperationNode(operator=plus, operands=[AtomNode(a), AtomNode(b)]))]), AssignmentNode(variable=result, value=OperationNode(operator=minus, operands=[AtomNode(b), AtomNode(a)])), AtomNode(result)]), ProgNode(statements=[AssignmentNode(variable=x, value=LiteralNode(8)), AssignmentNode(variable=y, value=LiteralNode(12)), AssignmentNode(variable=temp, value=OperationNode(operator=plus, operands=[AtomNode(x), AtomNode(y)])), AssignmentNode(variable=final, value=OperationNode(operator=times, operands=[AtomNode(temp), LiteralNode(2)])), AtomNode(final)]), FunctionNode(functionName=factorial, parameters=[n], body=ProgNode(statements=[ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(n), rightElement=LiteralNode(0)), action=ReturnNode(returnValue=LiteralNode(1)))], defaultAction=[ReturnNode(returnValue=OperationNode(operator=times, operands=[AtomNode(n), ListNode(elements=[AtomNode(factorial),OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(1)])])]))])])), FunctionCallNode(functionName=factorial, parameters=[AtomNode(factorial), LiteralNode(5)]), ProgNode(statements=[AssignmentNode(variable=i, value=LiteralNode(1)), AssignmentNode(variable=total, value=LiteralNode(0)), WhileNode(condition=ComparisonNode(comparison=less, leftElement=AtomNode(i), rightElement=LiteralNode(6)), body=AssignmentNode(variable=total, value=OperationNode(operator=plus, operands=[AtomNode(total), AtomNode(i)])),
AssignmentNode(variable=i, value=OperationNode(operator=plus, operands=[AtomNode(i), LiteralNode(1)]))), AtomNode(total)])])
  ProgNode(statements=[AssignmentNode(variable=x, value=LiteralNode(10)), AssignmentNode(variable=y, value=OperationNode(operator=plus, operands=[AtomNode(x), LiteralNode(5)])), AtomNode(y)])
    AssignmentNode(variable=x, value=LiteralNode(10))
    AssignmentNode(variable=y, value=OperationNode(operator=plus, operands=[AtomNode(x), LiteralNode(5)]))
    AtomNode(y)
  ProgNode(statements=[AssignmentNode(variable=x, value=LiteralNode(5)), AssignmentNode(variable=y, value=OperationNode(operator=plus, operands=[AtomNode(x), LiteralNode(3)])), AtomNode(y)])
    AssignmentNode(variable=x, value=LiteralNode(5))
    AssignmentNode(variable=y, value=OperationNode(operator=plus, operands=[AtomNode(x), LiteralNode(3)]))
    AtomNode(y)
  ProgNode(statements=[AssignmentNode(variable=x, value=LiteralNode(2)), AssignmentNode(variable=y, value=OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(4)])), AssignmentNode(variable=z, value=OperationNode(operator=minus, operands=[AtomNode(y), LiteralNode(3)])), AtomNode(z)])
    AssignmentNode(variable=x, value=LiteralNode(2))
    AssignmentNode(variable=y, value=OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(4)]))
    AssignmentNode(variable=z, value=OperationNode(operator=minus, operands=[AtomNode(y), LiteralNode(3)]))
    AtomNode(z)
  ProgNode(statements=[AssignmentNode(variable=a, value=LiteralNode(10)), AssignmentNode(variable=b, value=LiteralNode(15)), ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=greater, leftElement=AtomNode(a), rightElement=AtomNode(b)), action=AssignmentNode(variable=c, value=OperationNode(operator=minus, operands=[AtomNode(a), AtomNode(b)])))], defaultAction=[AssignmentNode(variable=c, value=OperationNode(operator=minus, operands=[AtomNode(b), AtomNode(a)]))])])
    AssignmentNode(variable=a, value=LiteralNode(10))
    AssignmentNode(variable=b, value=LiteralNode(15))
    ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=greater, leftElement=AtomNode(a), rightElement=AtomNode(b)), action=AssignmentNode(variable=c, value=OperationNode(operator=minus, operands=[AtomNode(a), AtomNode(b)])))], defaultAction=[AssignmentNode(variable=c, value=OperationNode(operator=minus, operands=[AtomNode(b), AtomNode(a)]))])
  ProgNode(statements=[AssignmentNode(variable=x, value=LiteralNode(3)), AssignmentNode(variable=y, value=OperationNode(operator=plus, operands=[AtomNode(x), LiteralNode(2)])), ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=less, leftElement=AtomNode(x), rightElement=AtomNode(y)), action=AssignmentNode(variable=result, value=OperationNode(operator=times, operands=[AtomNode(y), LiteralNode(2)])))], defaultAction=[AssignmentNode(variable=result, value=AtomNode(x))]), AtomNode(result)])
    AssignmentNode(variable=x, value=LiteralNode(3))
    AssignmentNode(variable=y, value=OperationNode(operator=plus, operands=[AtomNode(x), LiteralNode(2)]))
    ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=less, leftElement=AtomNode(x), rightElement=AtomNode(y)), action=AssignmentNode(variable=result, value=OperationNode(operator=times, operands=[AtomNode(y), LiteralNode(2)])))], defaultAction=[AssignmentNode(variable=result, value=AtomNode(x))])
    AtomNode(result)
  ProgNode(statements=[AssignmentNode(variable=counter, value=LiteralNode(1)), AssignmentNode(variable=sum, value=LiteralNode(0)), WhileNode(condition=ComparisonNode(comparison=less, leftElement=AtomNode(counter), rightElement=LiteralNode(6)), body=AssignmentNode(variable=sum, value=OperationNode(operator=plus, operands=[AtomNode(sum), AtomNode(counter)])),
AssignmentNode(variable=counter, value=OperationNode(operator=plus, operands=[AtomNode(counter), LiteralNode(1)]))), AtomNode(sum)])
    AssignmentNode(variable=counter, value=LiteralNode(1))
    AssignmentNode(variable=sum, value=LiteralNode(0))
    WhileNode(condition=ComparisonNode(comparison=less, leftElement=AtomNode(counter), rightElement=LiteralNode(6)), body=AssignmentNode(variable=sum, value=OperationNode(operator=plus, operands=[AtomNode(sum), AtomNode(counter)])),
AssignmentNode(variable=counter, value=OperationNode(operator=plus, operands=[AtomNode(counter), LiteralNode(1)])))
    AtomNode(sum)
  ProgNode(statements=[AssignmentNode(variable=a, value=LiteralNode(5)), AssignmentNode(variable=b, value=LiteralNode(10)), AssignmentNode(variable=c, value=OperationNode(operator=plus, operands=[AtomNode(a), AtomNode(b)])), FunctionNode(functionName=multiplyByTwo, parameters=[x], body=OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(2)])), AssignmentNode(variable=result, value=FunctionCallNode(functionName=multiplyByTwo, parameters=[AtomNode(multiplyByTwo), AtomNode(c)])), AtomNode(result)])
    AssignmentNode(variable=a, value=LiteralNode(5))
    AssignmentNode(variable=b, value=LiteralNode(10))
    AssignmentNode(variable=c, value=OperationNode(operator=plus, operands=[AtomNode(a), AtomNode(b)]))
    FunctionNode(functionName=multiplyByTwo, parameters=[x], body=OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(2)]))
    AssignmentNode(variable=result, value=FunctionCallNode(functionName=multiplyByTwo, parameters=[AtomNode(multiplyByTwo), AtomNode(c)]))
    AtomNode(result)
  ProgNode(statements=[AssignmentNode(variable=code, value=QuoteNode(QuotedExpr:OperationNode(operator=plus, operands=[LiteralNode(7), LiteralNode(8)]))), AssignmentNode(variable=result, value=EvalNode(node=AtomNode(code))), ProgNode(statements=[AssignmentNode(variable=x, value=LiteralNode(5)), AssignmentNode(variable=y, value=LiteralNode(10)), AssignmentNode(variable=result, value=OperationNode(operator=plus, operands=[AtomNode(result), OperationNode(operator=times, operands=[AtomNode(x), AtomNode(y)])]))]), AtomNode(result)])
    AssignmentNode(variable=code, value=QuoteNode(QuotedExpr:OperationNode(operator=plus, operands=[LiteralNode(7), LiteralNode(8)])))
    AssignmentNode(variable=result, value=EvalNode(node=AtomNode(code)))
    ProgNode(statements=[AssignmentNode(variable=x, value=LiteralNode(5)), AssignmentNode(variable=y, value=LiteralNode(10)), AssignmentNode(variable=result, value=OperationNode(operator=plus, operands=[AtomNode(result), OperationNode(operator=times, operands=[AtomNode(x), AtomNode(y)])]))])
      AssignmentNode(variable=x, value=LiteralNode(5))
      AssignmentNode(variable=y, value=LiteralNode(10))
      AssignmentNode(variable=result, value=OperationNode(operator=plus, operands=[AtomNode(result), OperationNode(operator=times, operands=[AtomNode(x), AtomNode(y)])]))
    AtomNode(result)
  ProgNode(statements=[AssignmentNode(variable=a, value=LiteralNode(4)), AssignmentNode(variable=b, value=LiteralNode(6)), ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(a), rightElement=AtomNode(b)), action=ReturnNode(returnValue=AtomNode(a)))], defaultAction=[ReturnNode(returnValue=OperationNode(operator=plus, operands=[AtomNode(a), AtomNode(b)]))]), AssignmentNode(variable=result, value=OperationNode(operator=minus, operands=[AtomNode(b), AtomNode(a)])), AtomNode(result)])
    AssignmentNode(variable=a, value=LiteralNode(4))
    AssignmentNode(variable=b, value=LiteralNode(6))
    ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(a), rightElement=AtomNode(b)), action=ReturnNode(returnValue=AtomNode(a)))], defaultAction=[ReturnNode(returnValue=OperationNode(operator=plus, operands=[AtomNode(a), AtomNode(b)]))])
    AssignmentNode(variable=result, value=OperationNode(operator=minus, operands=[AtomNode(b), AtomNode(a)]))
    AtomNode(result)
  ProgNode(statements=[AssignmentNode(variable=x, value=LiteralNode(8)), AssignmentNode(variable=y, value=LiteralNode(12)), AssignmentNode(variable=temp, value=OperationNode(operator=plus, operands=[AtomNode(x), AtomNode(y)])), AssignmentNode(variable=final, value=OperationNode(operator=times, operands=[AtomNode(temp), LiteralNode(2)])), AtomNode(final)])
    AssignmentNode(variable=x, value=LiteralNode(8))
    AssignmentNode(variable=y, value=LiteralNode(12))
    AssignmentNode(variable=temp, value=OperationNode(operator=plus, operands=[AtomNode(x), AtomNode(y)]))
    AssignmentNode(variable=final, value=OperationNode(operator=times, operands=[AtomNode(temp), LiteralNode(2)]))
    AtomNode(final)
  FunctionNode(functionName=factorial, parameters=[n], body=ProgNode(statements=[ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(n), rightElement=LiteralNode(0)), action=ReturnNode(returnValue=LiteralNode(1)))], defaultAction=[ReturnNode(returnValue=OperationNode(operator=times, operands=[AtomNode(n), ListNode(elements=[AtomNode(factorial),OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(1)])])]))])]))
  FunctionCallNode(functionName=factorial, parameters=[AtomNode(factorial), LiteralNode(5)])
  ProgNode(statements=[AssignmentNode(variable=i, value=LiteralNode(1)), AssignmentNode(variable=total, value=LiteralNode(0)), WhileNode(condition=ComparisonNode(comparison=less, leftElement=AtomNode(i), rightElement=LiteralNode(6)), body=AssignmentNode(variable=total, value=OperationNode(operator=plus, operands=[AtomNode(total), AtomNode(i)])),
AssignmentNode(variable=i, value=OperationNode(operator=plus, operands=[AtomNode(i), LiteralNode(1)]))), AtomNode(total)])
    AssignmentNode(variable=i, value=LiteralNode(1))
    AssignmentNode(variable=total, value=LiteralNode(0))
    WhileNode(condition=ComparisonNode(comparison=less, leftElement=AtomNode(i), rightElement=LiteralNode(6)), body=AssignmentNode(variable=total, value=OperationNode(operator=plus, operands=[AtomNode(total), AtomNode(i)])),
AssignmentNode(variable=i, value=OperationNode(operator=plus, operands=[AtomNode(i), LiteralNode(1)])))
    AtomNode(total)
