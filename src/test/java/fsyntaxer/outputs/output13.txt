ProgNode(statements=[FunctionNode(functionName=triple, parameters=[x], body=OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(3)])), FunctionNode(functionName=addAndTriple, parameters=[a, b], body=FunctionCallNode(functionName=triple, parameters=[AtomNode(triple), OperationNode(operator=plus, operands=[AtomNode(a), AtomNode(b)])])), FunctionCallNode(functionName=addAndTriple, parameters=[AtomNode(addAndTriple), LiteralNode(2), LiteralNode(3)]), FunctionNode(functionName=double, parameters=[x], body=OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(2)])), FunctionNode(functionName=applyFunction, parameters=[f, x], body=ListNode(elements=[AtomNode(f),AtomNode(x)])), FunctionCallNode(functionName=applyFunction, parameters=[AtomNode(applyFunction), AtomNode(double), LiteralNode(4)]), FunctionNode(functionName=returnMultiplier, parameters=[factor], body=LambdaNode(parameters=[x], body=OperationNode(operator=times, operands=[AtomNode(x), AtomNode(factor)]))), AssignmentNode(variable=triple, value=FunctionCallNode(functionName=returnMultiplier, parameters=[AtomNode(returnMultiplier), LiteralNode(3)])), ListNode(elements=[AtomNode(triple),LiteralNode(4)]), FunctionNode(functionName=square, parameters=[x], body=OperationNode(operator=times, operands=[AtomNode(x), AtomNode(x)])), FunctionNode(functionName=applyReturnedFunction, parameters=[f, x, factor], body=FunctionCallNode(functionName=applyFunction, parameters=[AtomNode(applyFunction), FunctionCallNode(functionName=returnMultiplier, parameters=[AtomNode(returnMultiplier), AtomNode(factor)]), AtomNode(x)])), FunctionCallNode(functionName=applyReturnedFunction, parameters=[AtomNode(applyReturnedFunction), AtomNode(square), LiteralNode(2), LiteralNode(3)])])
  FunctionNode(functionName=triple, parameters=[x], body=OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(3)]))
  FunctionNode(functionName=addAndTriple, parameters=[a, b], body=FunctionCallNode(functionName=triple, parameters=[AtomNode(triple), OperationNode(operator=plus, operands=[AtomNode(a), AtomNode(b)])]))
  FunctionCallNode(functionName=addAndTriple, parameters=[AtomNode(addAndTriple), LiteralNode(2), LiteralNode(3)])
  FunctionNode(functionName=double, parameters=[x], body=OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(2)]))
  FunctionNode(functionName=applyFunction, parameters=[f, x], body=ListNode(elements=[AtomNode(f),AtomNode(x)]))
  FunctionCallNode(functionName=applyFunction, parameters=[AtomNode(applyFunction), AtomNode(double), LiteralNode(4)])
  FunctionNode(functionName=returnMultiplier, parameters=[factor], body=LambdaNode(parameters=[x], body=OperationNode(operator=times, operands=[AtomNode(x), AtomNode(factor)])))
  AssignmentNode(variable=triple, value=FunctionCallNode(functionName=returnMultiplier, parameters=[AtomNode(returnMultiplier), LiteralNode(3)]))
  ListNode(elements=[AtomNode(triple),LiteralNode(4)])
  FunctionNode(functionName=square, parameters=[x], body=OperationNode(operator=times, operands=[AtomNode(x), AtomNode(x)]))
  FunctionNode(functionName=applyReturnedFunction, parameters=[f, x, factor], body=FunctionCallNode(functionName=applyFunction, parameters=[AtomNode(applyFunction), FunctionCallNode(functionName=returnMultiplier, parameters=[AtomNode(returnMultiplier), AtomNode(factor)]), AtomNode(x)]))
  FunctionCallNode(functionName=applyReturnedFunction, parameters=[AtomNode(applyReturnedFunction), AtomNode(square), LiteralNode(2), LiteralNode(3)])
