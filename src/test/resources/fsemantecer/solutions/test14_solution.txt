ProgNode(statements=[ProgNode(statements=[AssignmentNode(variable=x, value=LiteralNode(10)), AssignmentNode(variable=y, value=OperationNode(operator=plus, operands=[AtomNode(x), LiteralNode(5)])), AtomNode(y)]), ProgNode(statements=[AssignmentNode(variable=x, value=LiteralNode(5)), AssignmentNode(variable=y, value=OperationNode(operator=plus, operands=[AtomNode(x), LiteralNode(3)])), AtomNode(y)]), ProgNode(statements=[AssignmentNode(variable=x, value=LiteralNode(2)), AssignmentNode(variable=y, value=OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(4)])), AssignmentNode(variable=z, value=OperationNode(operator=minus, operands=[AtomNode(y), LiteralNode(3)])), AtomNode(z)]), ProgNode(statements=[AssignmentNode(variable=a, value=LiteralNode(10)), AssignmentNode(variable=b, value=LiteralNode(15)), ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=greater, leftElement=AtomNode(a), rightElement=AtomNode(b)), action=AssignmentNode(variable=c, value=OperationNode(operator=minus, operands=[AtomNode(a), AtomNode(b)])))], defaultAction=[AssignmentNode(variable=c, value=OperationNode(operator=minus, operands=[AtomNode(b), AtomNode(a)]))])]), ProgNode(statements=[AssignmentNode(variable=x, value=LiteralNode(3)), AssignmentNode(variable=y, value=OperationNode(operator=plus, operands=[AtomNode(x), LiteralNode(2)])), ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=less, leftElement=AtomNode(x), rightElement=AtomNode(y)), action=AssignmentNode(variable=result, value=OperationNode(operator=times, operands=[AtomNode(y), LiteralNode(2)])))], defaultAction=[AssignmentNode(variable=result, value=AtomNode(x))]), AtomNode(result)]), ProgNode(statements=[AssignmentNode(variable=counter, value=LiteralNode(1)), AssignmentNode(variable=sum, value=LiteralNode(0)), WhileNode(condition=ComparisonNode(comparison=less, leftElement=AtomNode(counter), rightElement=LiteralNode(6)), body=AssignmentNode(variable=sum, value=OperationNode(operator=plus, operands=[AtomNode(sum), AtomNode(counter)])),
AssignmentNode(variable=counter, value=OperationNode(operator=plus, operands=[AtomNode(counter), LiteralNode(1)]))), AtomNode(sum)]), ProgNode(statements=[AssignmentNode(variable=a, value=LiteralNode(5)), AssignmentNode(variable=b, value=LiteralNode(10)), AssignmentNode(variable=c, value=OperationNode(operator=plus, operands=[AtomNode(a), AtomNode(b)])), FunctionNode(functionName=multiplyByTwo, parameters=[x], body=ProgNode(statements=[OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(2)])])), AssignmentNode(variable=result, value=FunctionCallNode(functionName=multiplyByTwo, parameters=[AtomNode(c)])), AtomNode(result)]), ProgNode(statements=[AssignmentNode(variable=a, value=LiteralNode(4)), AssignmentNode(variable=b, value=LiteralNode(6)), ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(a), rightElement=AtomNode(b)), action=ReturnNode(returnValue=AtomNode(a)))], defaultAction=[ReturnNode(returnValue=OperationNode(operator=plus, operands=[AtomNode(a), AtomNode(b)]))]), AssignmentNode(variable=result, value=OperationNode(operator=minus, operands=[AtomNode(b), AtomNode(a)])), AtomNode(result)]), ProgNode(statements=[AssignmentNode(variable=x, value=LiteralNode(8)), AssignmentNode(variable=y, value=LiteralNode(12)), AssignmentNode(variable=temp, value=OperationNode(operator=plus, operands=[AtomNode(x), AtomNode(y)])), AssignmentNode(variable=final, value=OperationNode(operator=times, operands=[AtomNode(temp), LiteralNode(2)])), AtomNode(final)]), FunctionNode(functionName=factorial, parameters=[n], body=ProgNode(statements=[ProgNode(statements=[ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(n), rightElement=LiteralNode(0)), action=ReturnNode(returnValue=LiteralNode(1)))], defaultAction=[ReturnNode(returnValue=OperationNode(operator=times, operands=[AtomNode(n), FunctionCallNode(functionName=factorial, parameters=[OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(1)])])]))])])])), FunctionCallNode(functionName=factorial, parameters=[LiteralNode(5)]), ProgNode(statements=[AssignmentNode(variable=i, value=LiteralNode(1)), AssignmentNode(variable=total, value=LiteralNode(0)), WhileNode(condition=ComparisonNode(comparison=less, leftElement=AtomNode(i), rightElement=LiteralNode(6)), body=AssignmentNode(variable=total, value=OperationNode(operator=plus, operands=[AtomNode(total), AtomNode(i)])),
AssignmentNode(variable=i, value=OperationNode(operator=plus, operands=[AtomNode(i), LiteralNode(1)]))), AtomNode(total)])])
  ProgNode(statements=[AssignmentNode(variable=x, value=LiteralNode(10)), AssignmentNode(variable=y, value=OperationNode(operator=plus, operands=[AtomNode(x), LiteralNode(5)])), AtomNode(y)])
    AssignmentNode(variable=x, value=LiteralNode(10))
      LiteralNode(10)
    AssignmentNode(variable=y, value=OperationNode(operator=plus, operands=[AtomNode(x), LiteralNode(5)]))
      OperationNode(operator=plus, operands=[AtomNode(x), LiteralNode(5)])
        AtomNode(x)
        LiteralNode(5)
    AtomNode(y)
  ProgNode(statements=[AssignmentNode(variable=x, value=LiteralNode(5)), AssignmentNode(variable=y, value=OperationNode(operator=plus, operands=[AtomNode(x), LiteralNode(3)])), AtomNode(y)])
    AssignmentNode(variable=x, value=LiteralNode(5))
      LiteralNode(5)
    AssignmentNode(variable=y, value=OperationNode(operator=plus, operands=[AtomNode(x), LiteralNode(3)]))
      OperationNode(operator=plus, operands=[AtomNode(x), LiteralNode(3)])
        AtomNode(x)
        LiteralNode(3)
    AtomNode(y)
  ProgNode(statements=[AssignmentNode(variable=x, value=LiteralNode(2)), AssignmentNode(variable=y, value=OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(4)])), AssignmentNode(variable=z, value=OperationNode(operator=minus, operands=[AtomNode(y), LiteralNode(3)])), AtomNode(z)])
    AssignmentNode(variable=x, value=LiteralNode(2))
      LiteralNode(2)
    AssignmentNode(variable=y, value=OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(4)]))
      OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(4)])
        AtomNode(x)
        LiteralNode(4)
    AssignmentNode(variable=z, value=OperationNode(operator=minus, operands=[AtomNode(y), LiteralNode(3)]))
      OperationNode(operator=minus, operands=[AtomNode(y), LiteralNode(3)])
        AtomNode(y)
        LiteralNode(3)
    AtomNode(z)
  ProgNode(statements=[AssignmentNode(variable=a, value=LiteralNode(10)), AssignmentNode(variable=b, value=LiteralNode(15)), ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=greater, leftElement=AtomNode(a), rightElement=AtomNode(b)), action=AssignmentNode(variable=c, value=OperationNode(operator=minus, operands=[AtomNode(a), AtomNode(b)])))], defaultAction=[AssignmentNode(variable=c, value=OperationNode(operator=minus, operands=[AtomNode(b), AtomNode(a)]))])])
    AssignmentNode(variable=a, value=LiteralNode(10))
      LiteralNode(10)
    AssignmentNode(variable=b, value=LiteralNode(15))
      LiteralNode(15)
    ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=greater, leftElement=AtomNode(a), rightElement=AtomNode(b)), action=AssignmentNode(variable=c, value=OperationNode(operator=minus, operands=[AtomNode(a), AtomNode(b)])))], defaultAction=[AssignmentNode(variable=c, value=OperationNode(operator=minus, operands=[AtomNode(b), AtomNode(a)]))])
      ComparisonNode(comparison=greater, leftElement=AtomNode(a), rightElement=AtomNode(b))
        AtomNode(a)
        AtomNode(b)
      AssignmentNode(variable=c, value=OperationNode(operator=minus, operands=[AtomNode(a), AtomNode(b)]))
        OperationNode(operator=minus, operands=[AtomNode(a), AtomNode(b)])
          AtomNode(a)
          AtomNode(b)
  ProgNode(statements=[AssignmentNode(variable=x, value=LiteralNode(3)), AssignmentNode(variable=y, value=OperationNode(operator=plus, operands=[AtomNode(x), LiteralNode(2)])), ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=less, leftElement=AtomNode(x), rightElement=AtomNode(y)), action=AssignmentNode(variable=result, value=OperationNode(operator=times, operands=[AtomNode(y), LiteralNode(2)])))], defaultAction=[AssignmentNode(variable=result, value=AtomNode(x))]), AtomNode(result)])
    AssignmentNode(variable=x, value=LiteralNode(3))
      LiteralNode(3)
    AssignmentNode(variable=y, value=OperationNode(operator=plus, operands=[AtomNode(x), LiteralNode(2)]))
      OperationNode(operator=plus, operands=[AtomNode(x), LiteralNode(2)])
        AtomNode(x)
        LiteralNode(2)
    ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=less, leftElement=AtomNode(x), rightElement=AtomNode(y)), action=AssignmentNode(variable=result, value=OperationNode(operator=times, operands=[AtomNode(y), LiteralNode(2)])))], defaultAction=[AssignmentNode(variable=result, value=AtomNode(x))])
      ComparisonNode(comparison=less, leftElement=AtomNode(x), rightElement=AtomNode(y))
        AtomNode(x)
        AtomNode(y)
      AssignmentNode(variable=result, value=OperationNode(operator=times, operands=[AtomNode(y), LiteralNode(2)]))
        OperationNode(operator=times, operands=[AtomNode(y), LiteralNode(2)])
          AtomNode(y)
          LiteralNode(2)
    AtomNode(result)
  ProgNode(statements=[AssignmentNode(variable=counter, value=LiteralNode(1)), AssignmentNode(variable=sum, value=LiteralNode(0)), WhileNode(condition=ComparisonNode(comparison=less, leftElement=AtomNode(counter), rightElement=LiteralNode(6)), body=AssignmentNode(variable=sum, value=OperationNode(operator=plus, operands=[AtomNode(sum), AtomNode(counter)])),
AssignmentNode(variable=counter, value=OperationNode(operator=plus, operands=[AtomNode(counter), LiteralNode(1)]))), AtomNode(sum)])
    AssignmentNode(variable=counter, value=LiteralNode(1))
      LiteralNode(1)
    AssignmentNode(variable=sum, value=LiteralNode(0))
      LiteralNode(0)
    WhileNode(condition=ComparisonNode(comparison=less, leftElement=AtomNode(counter), rightElement=LiteralNode(6)), body=AssignmentNode(variable=sum, value=OperationNode(operator=plus, operands=[AtomNode(sum), AtomNode(counter)])),
AssignmentNode(variable=counter, value=OperationNode(operator=plus, operands=[AtomNode(counter), LiteralNode(1)])))
      ComparisonNode(comparison=less, leftElement=AtomNode(counter), rightElement=LiteralNode(6))
        AtomNode(counter)
        LiteralNode(6)
      AssignmentNode(variable=sum, value=OperationNode(operator=plus, operands=[AtomNode(sum), AtomNode(counter)]))
        OperationNode(operator=plus, operands=[AtomNode(sum), AtomNode(counter)])
          AtomNode(sum)
          AtomNode(counter)
      AssignmentNode(variable=counter, value=OperationNode(operator=plus, operands=[AtomNode(counter), LiteralNode(1)]))
        OperationNode(operator=plus, operands=[AtomNode(counter), LiteralNode(1)])
          AtomNode(counter)
          LiteralNode(1)
    AtomNode(sum)
  ProgNode(statements=[AssignmentNode(variable=a, value=LiteralNode(5)), AssignmentNode(variable=b, value=LiteralNode(10)), AssignmentNode(variable=c, value=OperationNode(operator=plus, operands=[AtomNode(a), AtomNode(b)])), FunctionNode(functionName=multiplyByTwo, parameters=[x], body=ProgNode(statements=[OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(2)])])), AssignmentNode(variable=result, value=FunctionCallNode(functionName=multiplyByTwo, parameters=[AtomNode(c)])), AtomNode(result)])
    AssignmentNode(variable=a, value=LiteralNode(5))
      LiteralNode(5)
    AssignmentNode(variable=b, value=LiteralNode(10))
      LiteralNode(10)
    AssignmentNode(variable=c, value=OperationNode(operator=plus, operands=[AtomNode(a), AtomNode(b)]))
      OperationNode(operator=plus, operands=[AtomNode(a), AtomNode(b)])
        AtomNode(a)
        AtomNode(b)
    FunctionNode(functionName=multiplyByTwo, parameters=[x], body=ProgNode(statements=[OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(2)])]))
      OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(2)])
        AtomNode(x)
        LiteralNode(2)
    AssignmentNode(variable=result, value=FunctionCallNode(functionName=multiplyByTwo, parameters=[AtomNode(c)]))
      FunctionCallNode(functionName=multiplyByTwo, parameters=[AtomNode(c)])
    AtomNode(result)
  ProgNode(statements=[AssignmentNode(variable=a, value=LiteralNode(4)), AssignmentNode(variable=b, value=LiteralNode(6)), ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(a), rightElement=AtomNode(b)), action=ReturnNode(returnValue=AtomNode(a)))], defaultAction=[ReturnNode(returnValue=OperationNode(operator=plus, operands=[AtomNode(a), AtomNode(b)]))]), AssignmentNode(variable=result, value=OperationNode(operator=minus, operands=[AtomNode(b), AtomNode(a)])), AtomNode(result)])
    AssignmentNode(variable=a, value=LiteralNode(4))
      LiteralNode(4)
    AssignmentNode(variable=b, value=LiteralNode(6))
      LiteralNode(6)
    ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(a), rightElement=AtomNode(b)), action=ReturnNode(returnValue=AtomNode(a)))], defaultAction=[ReturnNode(returnValue=OperationNode(operator=plus, operands=[AtomNode(a), AtomNode(b)]))])
      ComparisonNode(comparison=equal, leftElement=AtomNode(a), rightElement=AtomNode(b))
        AtomNode(a)
        AtomNode(b)
      ReturnNode(returnValue=AtomNode(a))
        AtomNode(a)
    AssignmentNode(variable=result, value=OperationNode(operator=minus, operands=[AtomNode(b), AtomNode(a)]))
      OperationNode(operator=minus, operands=[AtomNode(b), AtomNode(a)])
        AtomNode(b)
        AtomNode(a)
    AtomNode(result)
  ProgNode(statements=[AssignmentNode(variable=x, value=LiteralNode(8)), AssignmentNode(variable=y, value=LiteralNode(12)), AssignmentNode(variable=temp, value=OperationNode(operator=plus, operands=[AtomNode(x), AtomNode(y)])), AssignmentNode(variable=final, value=OperationNode(operator=times, operands=[AtomNode(temp), LiteralNode(2)])), AtomNode(final)])
    AssignmentNode(variable=x, value=LiteralNode(8))
      LiteralNode(8)
    AssignmentNode(variable=y, value=LiteralNode(12))
      LiteralNode(12)
    AssignmentNode(variable=temp, value=OperationNode(operator=plus, operands=[AtomNode(x), AtomNode(y)]))
      OperationNode(operator=plus, operands=[AtomNode(x), AtomNode(y)])
        AtomNode(x)
        AtomNode(y)
    AssignmentNode(variable=final, value=OperationNode(operator=times, operands=[AtomNode(temp), LiteralNode(2)]))
      OperationNode(operator=times, operands=[AtomNode(temp), LiteralNode(2)])
        AtomNode(temp)
        LiteralNode(2)
    AtomNode(final)
  FunctionNode(functionName=factorial, parameters=[n], body=ProgNode(statements=[ProgNode(statements=[ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(n), rightElement=LiteralNode(0)), action=ReturnNode(returnValue=LiteralNode(1)))], defaultAction=[ReturnNode(returnValue=OperationNode(operator=times, operands=[AtomNode(n), FunctionCallNode(functionName=factorial, parameters=[OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(1)])])]))])])]))
    ProgNode(statements=[ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(n), rightElement=LiteralNode(0)), action=ReturnNode(returnValue=LiteralNode(1)))], defaultAction=[ReturnNode(returnValue=OperationNode(operator=times, operands=[AtomNode(n), FunctionCallNode(functionName=factorial, parameters=[OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(1)])])]))])])
      ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(n), rightElement=LiteralNode(0)), action=ReturnNode(returnValue=LiteralNode(1)))], defaultAction=[ReturnNode(returnValue=OperationNode(operator=times, operands=[AtomNode(n), FunctionCallNode(functionName=factorial, parameters=[OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(1)])])]))])
        ComparisonNode(comparison=equal, leftElement=AtomNode(n), rightElement=LiteralNode(0))
          AtomNode(n)
          LiteralNode(0)
        ReturnNode(returnValue=LiteralNode(1))
          LiteralNode(1)
  FunctionCallNode(functionName=factorial, parameters=[LiteralNode(5)])
  ProgNode(statements=[AssignmentNode(variable=i, value=LiteralNode(1)), AssignmentNode(variable=total, value=LiteralNode(0)), WhileNode(condition=ComparisonNode(comparison=less, leftElement=AtomNode(i), rightElement=LiteralNode(6)), body=AssignmentNode(variable=total, value=OperationNode(operator=plus, operands=[AtomNode(total), AtomNode(i)])),
AssignmentNode(variable=i, value=OperationNode(operator=plus, operands=[AtomNode(i), LiteralNode(1)]))), AtomNode(total)])
    AssignmentNode(variable=i, value=LiteralNode(1))
      LiteralNode(1)
    AssignmentNode(variable=total, value=LiteralNode(0))
      LiteralNode(0)
    WhileNode(condition=ComparisonNode(comparison=less, leftElement=AtomNode(i), rightElement=LiteralNode(6)), body=AssignmentNode(variable=total, value=OperationNode(operator=plus, operands=[AtomNode(total), AtomNode(i)])),
AssignmentNode(variable=i, value=OperationNode(operator=plus, operands=[AtomNode(i), LiteralNode(1)])))
      ComparisonNode(comparison=less, leftElement=AtomNode(i), rightElement=LiteralNode(6))
        AtomNode(i)
        LiteralNode(6)
      AssignmentNode(variable=total, value=OperationNode(operator=plus, operands=[AtomNode(total), AtomNode(i)]))
        OperationNode(operator=plus, operands=[AtomNode(total), AtomNode(i)])
          AtomNode(total)
          AtomNode(i)
      AssignmentNode(variable=i, value=OperationNode(operator=plus, operands=[AtomNode(i), LiteralNode(1)]))
        OperationNode(operator=plus, operands=[AtomNode(i), LiteralNode(1)])
          AtomNode(i)
          LiteralNode(1)
    AtomNode(total)
