ProgNode(statements=[AssignmentNode(variable=code, value=QuoteNode(QuotedExpr:OperationNode(operator=plus, operands=[LiteralNode(7), LiteralNode(8)]))), EvalNode(node=AtomNode(code)), AssignmentNode(variable=conditionCode, value=QuoteNode(QuotedExpr:ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=greater, leftElement=LiteralNode(4), rightElement=LiteralNode(3)), action=OperationNode(operator=plus, operands=[LiteralNode(1), LiteralNode(1)]))], defaultAction=[OperationNode(operator=minus, operands=[LiteralNode(5), LiteralNode(2)])]))), EvalNode(node=AtomNode(conditionCode)), AssignmentNode(variable=nestedCode, value=QuoteNode(QuotedExpr:OperationNode(operator=plus, operands=[OperationNode(operator=times, operands=[LiteralNode(3), LiteralNode(4)]), OperationNode(operator=divide, operands=[LiteralNode(12), LiteralNode(3)])]))), EvalNode(node=AtomNode(nestedCode)), AssignmentNode(variable=factorialCode, value=QuoteNode(QuotedExpr:FunctionCallNode(functionName=factorial, parameters=[LiteralNode(4)]))), EvalNode(node=AtomNode(factorialCode))])
  AssignmentNode(variable=code, value=QuoteNode(QuotedExpr:OperationNode(operator=plus, operands=[LiteralNode(7), LiteralNode(8)])))
    QuoteNode(QuotedExpr:OperationNode(operator=plus, operands=[LiteralNode(7), LiteralNode(8)]))
      LiteralNode(15)
  EvalNode(node=AtomNode(code))
    AtomNode(code)
  AssignmentNode(variable=conditionCode, value=QuoteNode(QuotedExpr:ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=greater, leftElement=LiteralNode(4), rightElement=LiteralNode(3)), action=OperationNode(operator=plus, operands=[LiteralNode(1), LiteralNode(1)]))], defaultAction=[OperationNode(operator=minus, operands=[LiteralNode(5), LiteralNode(2)])])))
    QuoteNode(QuotedExpr:ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=greater, leftElement=LiteralNode(4), rightElement=LiteralNode(3)), action=OperationNode(operator=plus, operands=[LiteralNode(1), LiteralNode(1)]))], defaultAction=[OperationNode(operator=minus, operands=[LiteralNode(5), LiteralNode(2)])]))
      ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=greater, leftElement=LiteralNode(4), rightElement=LiteralNode(3)), action=OperationNode(operator=plus, operands=[LiteralNode(1), LiteralNode(1)]))], defaultAction=[OperationNode(operator=minus, operands=[LiteralNode(5), LiteralNode(2)])])
        BoolNode(booleanNode=true)
        LiteralNode(2)
  EvalNode(node=AtomNode(conditionCode))
    AtomNode(conditionCode)
  AssignmentNode(variable=nestedCode, value=QuoteNode(QuotedExpr:OperationNode(operator=plus, operands=[OperationNode(operator=times, operands=[LiteralNode(3), LiteralNode(4)]), OperationNode(operator=divide, operands=[LiteralNode(12), LiteralNode(3)])])))
    QuoteNode(QuotedExpr:OperationNode(operator=plus, operands=[OperationNode(operator=times, operands=[LiteralNode(3), LiteralNode(4)]), OperationNode(operator=divide, operands=[LiteralNode(12), LiteralNode(3)])]))
      OperationNode(operator=plus, operands=[OperationNode(operator=times, operands=[LiteralNode(3), LiteralNode(4)]), OperationNode(operator=divide, operands=[LiteralNode(12), LiteralNode(3)])])
        LiteralNode(12)
        LiteralNode(4.0)
  EvalNode(node=AtomNode(nestedCode))
    AtomNode(nestedCode)
  AssignmentNode(variable=factorialCode, value=QuoteNode(QuotedExpr:FunctionCallNode(functionName=factorial, parameters=[LiteralNode(4)])))
    QuoteNode(QuotedExpr:FunctionCallNode(functionName=factorial, parameters=[LiteralNode(4)]))
      FunctionCallNode(functionName=factorial, parameters=[LiteralNode(4)])
  EvalNode(node=AtomNode(factorialCode))
    AtomNode(factorialCode)
