ProgNode(statements=[LogicalOperationNode(operator=and, leftElement=BoolNode(booleanNode=true), rightElement=BoolNode(booleanNode=false)), LogicalOperationNode(operator=or, leftElement=BoolNode(booleanNode=true), rightElement=BoolNode(booleanNode=false)), LogicalOperationNode(operator=xor, leftElement=BoolNode(booleanNode=true), rightElement=BoolNode(booleanNode=false)), NotNode(element=BoolNode(booleanNode=true)), LogicalOperationNode(operator=xor, leftElement=PredicateNode(predicate=isint, element=LiteralNode(42)), rightElement=PredicateNode(predicate=isbool, element=LogicalOperationNode(operator=or, leftElement=BoolNode(booleanNode=false), rightElement=BoolNode(booleanNode=false)))), LogicalOperationNode(operator=and, leftElement=LogicalOperationNode(operator=and, leftElement=BoolNode(booleanNode=true), rightElement=PredicateNode(predicate=isreal, element=LiteralNode(42))), rightElement=LogicalOperationNode(operator=or, leftElement=PredicateNode(predicate=isint, element=HeadNode(list=ConsNode(head=LiteralNode(1), tail=ConsNode(head=LiteralNode(2), tail=ListNode(elements=[]))))), rightElement=BoolNode(booleanNode=true))), NotNode(element=LogicalOperationNode(operator=or, leftElement=BoolNode(booleanNode=false), rightElement=PredicateNode(predicate=isnull, element=NullNode(nullNode=ast.nodes.NullNode@5ef04b5))))])
  LogicalOperationNode(operator=and, leftElement=BoolNode(booleanNode=true), rightElement=BoolNode(booleanNode=false))
    BoolNode(booleanNode=true)
    BoolNode(booleanNode=false)
  LogicalOperationNode(operator=or, leftElement=BoolNode(booleanNode=true), rightElement=BoolNode(booleanNode=false))
    BoolNode(booleanNode=true)
    BoolNode(booleanNode=false)
  LogicalOperationNode(operator=xor, leftElement=BoolNode(booleanNode=true), rightElement=BoolNode(booleanNode=false))
    BoolNode(booleanNode=true)
    BoolNode(booleanNode=false)
  NotNode(element=BoolNode(booleanNode=true))
    BoolNode(booleanNode=true)
  LogicalOperationNode(operator=xor, leftElement=PredicateNode(predicate=isint, element=LiteralNode(42)), rightElement=PredicateNode(predicate=isbool, element=LogicalOperationNode(operator=or, leftElement=BoolNode(booleanNode=false), rightElement=BoolNode(booleanNode=false))))
    PredicateNode(predicate=isint, element=LiteralNode(42))
      LiteralNode(42)
    PredicateNode(predicate=isbool, element=LogicalOperationNode(operator=or, leftElement=BoolNode(booleanNode=false), rightElement=BoolNode(booleanNode=false)))
      LogicalOperationNode(operator=or, leftElement=BoolNode(booleanNode=false), rightElement=BoolNode(booleanNode=false))
        BoolNode(booleanNode=false)
        BoolNode(booleanNode=false)
  LogicalOperationNode(operator=and, leftElement=LogicalOperationNode(operator=and, leftElement=BoolNode(booleanNode=true), rightElement=PredicateNode(predicate=isreal, element=LiteralNode(42))), rightElement=LogicalOperationNode(operator=or, leftElement=PredicateNode(predicate=isint, element=HeadNode(list=ConsNode(head=LiteralNode(1), tail=ConsNode(head=LiteralNode(2), tail=ListNode(elements=[]))))), rightElement=BoolNode(booleanNode=true)))
    LogicalOperationNode(operator=and, leftElement=BoolNode(booleanNode=true), rightElement=PredicateNode(predicate=isreal, element=LiteralNode(42)))
      BoolNode(booleanNode=true)
      PredicateNode(predicate=isreal, element=LiteralNode(42))
        LiteralNode(42)
    LogicalOperationNode(operator=or, leftElement=PredicateNode(predicate=isint, element=HeadNode(list=ConsNode(head=LiteralNode(1), tail=ConsNode(head=LiteralNode(2), tail=ListNode(elements=[]))))), rightElement=BoolNode(booleanNode=true))
      PredicateNode(predicate=isint, element=HeadNode(list=ConsNode(head=LiteralNode(1), tail=ConsNode(head=LiteralNode(2), tail=ListNode(elements=[])))))
        HeadNode(list=ConsNode(head=LiteralNode(1), tail=ConsNode(head=LiteralNode(2), tail=ListNode(elements=[]))))
          ConsNode(head=LiteralNode(1), tail=ConsNode(head=LiteralNode(2), tail=ListNode(elements=[])))
            LiteralNode(1)
            ConsNode(head=LiteralNode(2), tail=ListNode(elements=[]))
              LiteralNode(2)
              ListNode(elements=[])
      BoolNode(booleanNode=true)
  NotNode(element=LogicalOperationNode(operator=or, leftElement=BoolNode(booleanNode=false), rightElement=PredicateNode(predicate=isnull, element=NullNode(nullNode=ast.nodes.NullNode@5ef04b5))))
    LogicalOperationNode(operator=or, leftElement=BoolNode(booleanNode=false), rightElement=PredicateNode(predicate=isnull, element=NullNode(nullNode=ast.nodes.NullNode@5ef04b5)))
      BoolNode(booleanNode=false)
      PredicateNode(predicate=isnull, element=NullNode(nullNode=ast.nodes.NullNode@5ef04b5))
        NullNode(nullNode=ast.nodes.NullNode@5ef04b5)
