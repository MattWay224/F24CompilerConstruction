ProgNode(statements=[AssignmentNode(variable=code, value=QuoteNode(QuotedExpr:OperationNode(operator=plus, operands=[LiteralNode(7), LiteralNode(8), LiteralNode(9)]))), EvalNode(node=AtomNode(code)), AssignmentNode(variable=conditionCode, value=QuoteNode(QuotedExpr:ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=greater, leftElement=LiteralNode(4), rightElement=LiteralNode(3)), action=OperationNode(operator=plus, operands=[LiteralNode(1), LiteralNode(1)]))], defaultAction=[OperationNode(operator=minus, operands=[LiteralNode(5), LiteralNode(2)])]))), EvalNode(node=AtomNode(conditionCode)), AssignmentNode(variable=nestedCode, value=QuoteNode(QuotedExpr:OperationNode(operator=plus, operands=[OperationNode(operator=times, operands=[LiteralNode(3), LiteralNode(4)]), OperationNode(operator=divide, operands=[LiteralNode(12), LiteralNode(3)])]))), EvalNode(node=AtomNode(nestedCode)), FunctionNode(functionName=factorial, parameters=[n], body=ProgNode(statements=[ProgNode(statements=[ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(n), rightElement=LiteralNode(0)), action=ReturnNode(returnValue=LiteralNode(1)))], defaultAction=[ReturnNode(returnValue=OperationNode(operator=times, operands=[AtomNode(n), FunctionCallNode(functionName=factorial, parameters=[OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(1)])])]))])])])), AssignmentNode(variable=factorialCode, value=QuoteNode(QuotedExpr:FunctionCallNode(functionName=factorial, parameters=[LiteralNode(5)]))), EvalNode(node=AtomNode(factorialCode)), AssignmentNode(variable=plusQuote, value=QuoteNode(QuotedExpr:OperationNode(operator=plus, operands=[LiteralNode(1), LiteralNode(2), LiteralNode(3)]))), EvalNode(node=AtomNode(plusQuote)), AssignmentNode(variable=x, value=LiteralNode(1)), AtomNode(x), QuoteNode(QuotedExpr:AtomNode(x)), EvalNode(node=QuoteNode(QuotedExpr:OperationNode(operator=times, operands=[LiteralNode(2), LiteralNode(4)])))])
  AssignmentNode(variable=code, value=QuoteNode(QuotedExpr:OperationNode(operator=plus, operands=[LiteralNode(7), LiteralNode(8), LiteralNode(9)])))
    QuoteNode(QuotedExpr:OperationNode(operator=plus, operands=[LiteralNode(7), LiteralNode(8), LiteralNode(9)]))
      OperationNode(operator=plus, operands=[LiteralNode(7), LiteralNode(8), LiteralNode(9)])
        LiteralNode(7)
        LiteralNode(8)
        LiteralNode(9)
  EvalNode(node=AtomNode(code))
    AtomNode(code)
  AssignmentNode(variable=conditionCode, value=QuoteNode(QuotedExpr:ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=greater, leftElement=LiteralNode(4), rightElement=LiteralNode(3)), action=OperationNode(operator=plus, operands=[LiteralNode(1), LiteralNode(1)]))], defaultAction=[OperationNode(operator=minus, operands=[LiteralNode(5), LiteralNode(2)])])))
    QuoteNode(QuotedExpr:ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=greater, leftElement=LiteralNode(4), rightElement=LiteralNode(3)), action=OperationNode(operator=plus, operands=[LiteralNode(1), LiteralNode(1)]))], defaultAction=[OperationNode(operator=minus, operands=[LiteralNode(5), LiteralNode(2)])]))
      ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=greater, leftElement=LiteralNode(4), rightElement=LiteralNode(3)), action=OperationNode(operator=plus, operands=[LiteralNode(1), LiteralNode(1)]))], defaultAction=[OperationNode(operator=minus, operands=[LiteralNode(5), LiteralNode(2)])])
        ComparisonNode(comparison=greater, leftElement=LiteralNode(4), rightElement=LiteralNode(3))
          LiteralNode(4)
          LiteralNode(3)
        OperationNode(operator=plus, operands=[LiteralNode(1), LiteralNode(1)])
          LiteralNode(1)
          LiteralNode(1)
  EvalNode(node=AtomNode(conditionCode))
    AtomNode(conditionCode)
  AssignmentNode(variable=nestedCode, value=QuoteNode(QuotedExpr:OperationNode(operator=plus, operands=[OperationNode(operator=times, operands=[LiteralNode(3), LiteralNode(4)]), OperationNode(operator=divide, operands=[LiteralNode(12), LiteralNode(3)])])))
    QuoteNode(QuotedExpr:OperationNode(operator=plus, operands=[OperationNode(operator=times, operands=[LiteralNode(3), LiteralNode(4)]), OperationNode(operator=divide, operands=[LiteralNode(12), LiteralNode(3)])]))
      OperationNode(operator=plus, operands=[OperationNode(operator=times, operands=[LiteralNode(3), LiteralNode(4)]), OperationNode(operator=divide, operands=[LiteralNode(12), LiteralNode(3)])])
        OperationNode(operator=times, operands=[LiteralNode(3), LiteralNode(4)])
          LiteralNode(3)
          LiteralNode(4)
        OperationNode(operator=divide, operands=[LiteralNode(12), LiteralNode(3)])
          LiteralNode(12)
          LiteralNode(3)
  EvalNode(node=AtomNode(nestedCode))
    AtomNode(nestedCode)
  FunctionNode(functionName=factorial, parameters=[n], body=ProgNode(statements=[ProgNode(statements=[ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(n), rightElement=LiteralNode(0)), action=ReturnNode(returnValue=LiteralNode(1)))], defaultAction=[ReturnNode(returnValue=OperationNode(operator=times, operands=[AtomNode(n), FunctionCallNode(functionName=factorial, parameters=[OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(1)])])]))])])]))
    ProgNode(statements=[ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(n), rightElement=LiteralNode(0)), action=ReturnNode(returnValue=LiteralNode(1)))], defaultAction=[ReturnNode(returnValue=OperationNode(operator=times, operands=[AtomNode(n), FunctionCallNode(functionName=factorial, parameters=[OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(1)])])]))])])
      ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(n), rightElement=LiteralNode(0)), action=ReturnNode(returnValue=LiteralNode(1)))], defaultAction=[ReturnNode(returnValue=OperationNode(operator=times, operands=[AtomNode(n), FunctionCallNode(functionName=factorial, parameters=[OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(1)])])]))])
        ComparisonNode(comparison=equal, leftElement=AtomNode(n), rightElement=LiteralNode(0))
          AtomNode(n)
          LiteralNode(0)
        ReturnNode(returnValue=LiteralNode(1))
          LiteralNode(1)
  AssignmentNode(variable=factorialCode, value=QuoteNode(QuotedExpr:FunctionCallNode(functionName=factorial, parameters=[LiteralNode(5)])))
    QuoteNode(QuotedExpr:FunctionCallNode(functionName=factorial, parameters=[LiteralNode(5)]))
      FunctionCallNode(functionName=factorial, parameters=[LiteralNode(5)])
  EvalNode(node=AtomNode(factorialCode))
    AtomNode(factorialCode)
  AssignmentNode(variable=plusQuote, value=QuoteNode(QuotedExpr:OperationNode(operator=plus, operands=[LiteralNode(1), LiteralNode(2), LiteralNode(3)])))
    QuoteNode(QuotedExpr:OperationNode(operator=plus, operands=[LiteralNode(1), LiteralNode(2), LiteralNode(3)]))
      OperationNode(operator=plus, operands=[LiteralNode(1), LiteralNode(2), LiteralNode(3)])
        LiteralNode(1)
        LiteralNode(2)
        LiteralNode(3)
  EvalNode(node=AtomNode(plusQuote))
    AtomNode(plusQuote)
  AssignmentNode(variable=x, value=LiteralNode(1))
    LiteralNode(1)
  AtomNode(x)
  QuoteNode(QuotedExpr:AtomNode(x))
    AtomNode(x)
  EvalNode(node=QuoteNode(QuotedExpr:OperationNode(operator=times, operands=[LiteralNode(2), LiteralNode(4)])))
    QuoteNode(QuotedExpr:OperationNode(operator=times, operands=[LiteralNode(2), LiteralNode(4)]))
      OperationNode(operator=times, operands=[LiteralNode(2), LiteralNode(4)])
        LiteralNode(2)
        LiteralNode(4)
