ProgNode(statements=[FunctionNode(functionName=factorial, parameters=[n], body=ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(n), rightElement=LiteralNode(0)), action=LiteralNode(1))], defaultAction=[ListNode(elements=[LiteralNode(true),OperationNode(operator=times, operands=[AtomNode(n), ListNode(elements=[AtomNode(factorial),OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(1)])])])])])), FunctionCallNode(functionName=factorial, parameters=[AtomNode(factorial), LiteralNode(5)]), FunctionCallNode(functionName=factorial, parameters=[AtomNode(factorial), LiteralNode(6)]), FunctionNode(functionName=fibonacci, parameters=[n], body=ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=less, leftElement=AtomNode(n), rightElement=LiteralNode(2)), action=AtomNode(n))], defaultAction=[ListNode(elements=[LiteralNode(true),OperationNode(operator=plus, operands=[ListNode(elements=[AtomNode(fibonacci),OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(1)])]), ListNode(elements=[AtomNode(fibonacci),OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(2)])])])])])), FunctionCallNode(functionName=fibonacci, parameters=[AtomNode(fibonacci), LiteralNode(5)]), FunctionCallNode(functionName=fibonacci, parameters=[AtomNode(fibonacci), LiteralNode(8)]), FunctionNode(functionName=sumToN, parameters=[n], body=ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(n), rightElement=LiteralNode(0)), action=LiteralNode(0))], defaultAction=[ListNode(elements=[LiteralNode(true),OperationNode(operator=plus, operands=[AtomNode(n), ListNode(elements=[AtomNode(sumToN),OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(1)])])])])])), FunctionCallNode(functionName=sumToN, parameters=[AtomNode(sumToN), LiteralNode(5)]), FunctionCallNode(functionName=sumToN, parameters=[AtomNode(sumToN), LiteralNode(10)])])
  FunctionNode(functionName=factorial, parameters=[n], body=ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(n), rightElement=LiteralNode(0)), action=LiteralNode(1))], defaultAction=[ListNode(elements=[LiteralNode(true),OperationNode(operator=times, operands=[AtomNode(n), ListNode(elements=[AtomNode(factorial),OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(1)])])])])]))
  FunctionCallNode(functionName=factorial, parameters=[AtomNode(factorial), LiteralNode(5)])
  FunctionCallNode(functionName=factorial, parameters=[AtomNode(factorial), LiteralNode(6)])
  FunctionNode(functionName=fibonacci, parameters=[n], body=ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=less, leftElement=AtomNode(n), rightElement=LiteralNode(2)), action=AtomNode(n))], defaultAction=[ListNode(elements=[LiteralNode(true),OperationNode(operator=plus, operands=[ListNode(elements=[AtomNode(fibonacci),OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(1)])]), ListNode(elements=[AtomNode(fibonacci),OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(2)])])])])]))
  FunctionCallNode(functionName=fibonacci, parameters=[AtomNode(fibonacci), LiteralNode(5)])
  FunctionCallNode(functionName=fibonacci, parameters=[AtomNode(fibonacci), LiteralNode(8)])
  FunctionNode(functionName=sumToN, parameters=[n], body=ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(n), rightElement=LiteralNode(0)), action=LiteralNode(0))], defaultAction=[ListNode(elements=[LiteralNode(true),OperationNode(operator=plus, operands=[AtomNode(n), ListNode(elements=[AtomNode(sumToN),OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(1)])])])])]))
  FunctionCallNode(functionName=sumToN, parameters=[AtomNode(sumToN), LiteralNode(5)])
  FunctionCallNode(functionName=sumToN, parameters=[AtomNode(sumToN), LiteralNode(10)])
