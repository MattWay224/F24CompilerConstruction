ProgNode(statements=[FunctionNode(functionName=factorial, parameters=[n], body=ProgNode(statements=[ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(n), rightElement=LiteralNode(0)), action=LiteralNode(1))], defaultAction=[ListNode(elements=[BoolNode(booleanNode=true),OperationNode(operator=times, operands=[AtomNode(n), FunctionCallNode(functionName=factorial, parameters=[OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(1)])])])])])])), FunctionCallNode(functionName=factorial, parameters=[LiteralNode(5)]), FunctionCallNode(functionName=factorial, parameters=[LiteralNode(6)]), FunctionNode(functionName=fibonacci, parameters=[n], body=ProgNode(statements=[ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=less, leftElement=AtomNode(n), rightElement=LiteralNode(2)), action=AtomNode(n))], defaultAction=[ListNode(elements=[BoolNode(booleanNode=true),OperationNode(operator=plus, operands=[FunctionCallNode(functionName=fibonacci, parameters=[OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(1)])]), FunctionCallNode(functionName=fibonacci, parameters=[OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(2)])])])])])])), FunctionCallNode(functionName=fibonacci, parameters=[LiteralNode(5)]), FunctionCallNode(functionName=fibonacci, parameters=[LiteralNode(8)]), FunctionNode(functionName=sumToN, parameters=[n], body=ProgNode(statements=[ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(n), rightElement=LiteralNode(0)), action=LiteralNode(0))], defaultAction=[ListNode(elements=[BoolNode(booleanNode=true),OperationNode(operator=plus, operands=[AtomNode(n), FunctionCallNode(functionName=sumToN, parameters=[OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(1)])])])])])])), FunctionCallNode(functionName=sumToN, parameters=[LiteralNode(5)]), FunctionCallNode(functionName=sumToN, parameters=[LiteralNode(10)])])
  FunctionNode(functionName=factorial, parameters=[n], body=ProgNode(statements=[ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(n), rightElement=LiteralNode(0)), action=LiteralNode(1))], defaultAction=[ListNode(elements=[BoolNode(booleanNode=true),OperationNode(operator=times, operands=[AtomNode(n), FunctionCallNode(functionName=factorial, parameters=[OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(1)])])])])])]))
    ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(n), rightElement=LiteralNode(0)), action=LiteralNode(1))], defaultAction=[ListNode(elements=[BoolNode(booleanNode=true),OperationNode(operator=times, operands=[AtomNode(n), FunctionCallNode(functionName=factorial, parameters=[OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(1)])])])])])
      BoolNode(booleanNode=false)
      LiteralNode(1)
  FunctionCallNode(functionName=factorial, parameters=[LiteralNode(5)])
  FunctionCallNode(functionName=factorial, parameters=[LiteralNode(6)])
  FunctionNode(functionName=fibonacci, parameters=[n], body=ProgNode(statements=[ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=less, leftElement=AtomNode(n), rightElement=LiteralNode(2)), action=AtomNode(n))], defaultAction=[ListNode(elements=[BoolNode(booleanNode=true),OperationNode(operator=plus, operands=[FunctionCallNode(functionName=fibonacci, parameters=[OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(1)])]), FunctionCallNode(functionName=fibonacci, parameters=[OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(2)])])])])])]))
    ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=less, leftElement=AtomNode(n), rightElement=LiteralNode(2)), action=AtomNode(n))], defaultAction=[ListNode(elements=[BoolNode(booleanNode=true),OperationNode(operator=plus, operands=[FunctionCallNode(functionName=fibonacci, parameters=[OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(1)])]), FunctionCallNode(functionName=fibonacci, parameters=[OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(2)])])])])])
      BoolNode(booleanNode=false)
      AtomNode(n)
  FunctionCallNode(functionName=fibonacci, parameters=[LiteralNode(5)])
  FunctionCallNode(functionName=fibonacci, parameters=[LiteralNode(8)])
  FunctionNode(functionName=sumToN, parameters=[n], body=ProgNode(statements=[ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(n), rightElement=LiteralNode(0)), action=LiteralNode(0))], defaultAction=[ListNode(elements=[BoolNode(booleanNode=true),OperationNode(operator=plus, operands=[AtomNode(n), FunctionCallNode(functionName=sumToN, parameters=[OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(1)])])])])])]))
    ConditionNode(branches=[ConditionBranch(condition=ComparisonNode(comparison=equal, leftElement=AtomNode(n), rightElement=LiteralNode(0)), action=LiteralNode(0))], defaultAction=[ListNode(elements=[BoolNode(booleanNode=true),OperationNode(operator=plus, operands=[AtomNode(n), FunctionCallNode(functionName=sumToN, parameters=[OperationNode(operator=minus, operands=[AtomNode(n), LiteralNode(1)])])])])])
      BoolNode(booleanNode=false)
      LiteralNode(0)
  FunctionCallNode(functionName=sumToN, parameters=[LiteralNode(5)])
  FunctionCallNode(functionName=sumToN, parameters=[LiteralNode(10)])
