ProgNode(statements=[FunctionNode(functionName=triple, parameters=[x], body=ProgNode(statements=[OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(3)])])), FunctionNode(functionName=addAndTriple, parameters=[a, b], body=ProgNode(statements=[FunctionCallNode(functionName=triple, parameters=[OperationNode(operator=plus, operands=[AtomNode(a), AtomNode(b)])])])), FunctionCallNode(functionName=addAndTriple, parameters=[LiteralNode(2), LiteralNode(3)]), FunctionNode(functionName=double, parameters=[x], body=ProgNode(statements=[OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(2)])])), FunctionNode(functionName=applyFunction, parameters=[f, x], body=ProgNode(statements=[ListNode(elements=[AtomNode(f),AtomNode(x)])])), FunctionCallNode(functionName=applyFunction, parameters=[AtomNode(double), LiteralNode(4)]), FunctionNode(functionName=returnMultiplier, parameters=[factor], body=ProgNode(statements=[LambdaNode(parameters=[x], body=OperationNode(operator=times, operands=[AtomNode(x), AtomNode(factor)]))])), AssignmentNode(variable=triple, value=FunctionCallNode(functionName=returnMultiplier, parameters=[LiteralNode(3)])), ListNode(elements=[AtomNode(triple),LiteralNode(4)]), FunctionNode(functionName=square, parameters=[x], body=ProgNode(statements=[OperationNode(operator=times, operands=[AtomNode(x), AtomNode(x)])])), FunctionNode(functionName=applyReturnedFunction, parameters=[f, x, factor], body=ProgNode(statements=[FunctionCallNode(functionName=applyFunction, parameters=[FunctionCallNode(functionName=returnMultiplier, parameters=[AtomNode(factor)]), AtomNode(x)])])), FunctionCallNode(functionName=applyReturnedFunction, parameters=[AtomNode(square), LiteralNode(2), LiteralNode(3)])])
  FunctionNode(functionName=triple, parameters=[x], body=ProgNode(statements=[OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(3)])]))
    OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(3)])
      AtomNode(x)
      LiteralNode(3)
  FunctionNode(functionName=addAndTriple, parameters=[a, b], body=ProgNode(statements=[FunctionCallNode(functionName=triple, parameters=[OperationNode(operator=plus, operands=[AtomNode(a), AtomNode(b)])])]))
    FunctionCallNode(functionName=triple, parameters=[OperationNode(operator=plus, operands=[AtomNode(a), AtomNode(b)])])
  FunctionCallNode(functionName=addAndTriple, parameters=[LiteralNode(2), LiteralNode(3)])
  FunctionNode(functionName=double, parameters=[x], body=ProgNode(statements=[OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(2)])]))
    OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(2)])
      AtomNode(x)
      LiteralNode(2)
  FunctionNode(functionName=applyFunction, parameters=[f, x], body=ProgNode(statements=[ListNode(elements=[AtomNode(f),AtomNode(x)])]))
    ListNode(elements=[AtomNode(f),AtomNode(x)])
      AtomNode(f)
      AtomNode(x)
  FunctionCallNode(functionName=applyFunction, parameters=[AtomNode(double), LiteralNode(4)])
  FunctionNode(functionName=returnMultiplier, parameters=[factor], body=ProgNode(statements=[LambdaNode(parameters=[x], body=OperationNode(operator=times, operands=[AtomNode(x), AtomNode(factor)]))]))
    LambdaNode(parameters=[x], body=OperationNode(operator=times, operands=[AtomNode(x), AtomNode(factor)]))
      OperationNode(operator=times, operands=[AtomNode(x), AtomNode(factor)])
        AtomNode(x)
        AtomNode(factor)
  AssignmentNode(variable=triple, value=FunctionCallNode(functionName=returnMultiplier, parameters=[LiteralNode(3)]))
    FunctionCallNode(functionName=returnMultiplier, parameters=[LiteralNode(3)])
  ListNode(elements=[AtomNode(triple),LiteralNode(4)])
    AtomNode(triple)
    LiteralNode(4)
  FunctionNode(functionName=square, parameters=[x], body=ProgNode(statements=[OperationNode(operator=times, operands=[AtomNode(x), AtomNode(x)])]))
    OperationNode(operator=times, operands=[AtomNode(x), AtomNode(x)])
      AtomNode(x)
      AtomNode(x)
  FunctionNode(functionName=applyReturnedFunction, parameters=[f, x, factor], body=ProgNode(statements=[FunctionCallNode(functionName=applyFunction, parameters=[FunctionCallNode(functionName=returnMultiplier, parameters=[AtomNode(factor)]), AtomNode(x)])]))
    FunctionCallNode(functionName=applyFunction, parameters=[FunctionCallNode(functionName=returnMultiplier, parameters=[AtomNode(factor)]), AtomNode(x)])
  FunctionCallNode(functionName=applyReturnedFunction, parameters=[AtomNode(square), LiteralNode(2), LiteralNode(3)])
