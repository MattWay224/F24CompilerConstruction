ProgNode(statements=[FunctionNode(functionName=triple, parameters=[x], body=ProgNode(statements=[OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(3)])])), FunctionNode(functionName=addAndTriple, parameters=[a, b], body=ProgNode(statements=[FunctionCallNode(functionName=triple, parameters=[OperationNode(operator=plus, operands=[AtomNode(a), AtomNode(b)])])])), FunctionCallNode(functionName=addAndTriple, parameters=[LiteralNode(2), LiteralNode(3)]), FunctionCallNode(functionName=triple, parameters=[LiteralNode(3)]), FunctionNode(functionName=double, parameters=[x], body=ProgNode(statements=[OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(2)])])), FunctionNode(functionName=applyFunction, parameters=[f], body=ProgNode(statements=[AtomNode(f)])), FunctionCallNode(functionName=applyFunction, parameters=[FunctionCallNode(functionName=double, parameters=[LiteralNode(4)])]), FunctionNode(functionName=returnMultiplier, parameters=[factor, x], body=ProgNode(statements=[OperationNode(operator=times, operands=[AtomNode(x), AtomNode(factor)])])), FunctionCallNode(functionName=triple, parameters=[LiteralNode(4)]), FunctionNode(functionName=square, parameters=[x], body=ProgNode(statements=[OperationNode(operator=times, operands=[AtomNode(x), AtomNode(x)])])), FunctionCallNode(functionName=square, parameters=[FunctionCallNode(functionName=triple, parameters=[LiteralNode(4)])])])
  FunctionNode(functionName=triple, parameters=[x], body=ProgNode(statements=[OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(3)])]))
    OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(3)])
      AtomNode(x)
      LiteralNode(3)
  FunctionNode(functionName=addAndTriple, parameters=[a, b], body=ProgNode(statements=[FunctionCallNode(functionName=triple, parameters=[OperationNode(operator=plus, operands=[AtomNode(a), AtomNode(b)])])]))
    FunctionCallNode(functionName=triple, parameters=[OperationNode(operator=plus, operands=[AtomNode(a), AtomNode(b)])])
  FunctionCallNode(functionName=addAndTriple, parameters=[LiteralNode(2), LiteralNode(3)])
  FunctionCallNode(functionName=triple, parameters=[LiteralNode(3)])
  FunctionNode(functionName=double, parameters=[x], body=ProgNode(statements=[OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(2)])]))
    OperationNode(operator=times, operands=[AtomNode(x), LiteralNode(2)])
      AtomNode(x)
      LiteralNode(2)
  FunctionNode(functionName=applyFunction, parameters=[f], body=ProgNode(statements=[AtomNode(f)]))
    AtomNode(f)
  FunctionCallNode(functionName=applyFunction, parameters=[FunctionCallNode(functionName=double, parameters=[LiteralNode(4)])])
  FunctionNode(functionName=returnMultiplier, parameters=[factor, x], body=ProgNode(statements=[OperationNode(operator=times, operands=[AtomNode(x), AtomNode(factor)])]))
    OperationNode(operator=times, operands=[AtomNode(x), AtomNode(factor)])
      AtomNode(x)
      AtomNode(factor)
  FunctionCallNode(functionName=triple, parameters=[LiteralNode(4)])
  FunctionNode(functionName=square, parameters=[x], body=ProgNode(statements=[OperationNode(operator=times, operands=[AtomNode(x), AtomNode(x)])]))
    OperationNode(operator=times, operands=[AtomNode(x), AtomNode(x)])
      AtomNode(x)
      AtomNode(x)
  FunctionCallNode(functionName=square, parameters=[FunctionCallNode(functionName=triple, parameters=[LiteralNode(4)])])
